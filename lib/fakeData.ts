// src/lib/fakeData.ts

// Im using FakerJS to create fake data for our dashboard. This helps me mock up what’s
// needed quickly without waiting on a real backend.   All the types and  functions below
// are just for generating random content when the page loads

import { faker } from "@faker-js/faker";

// Here I Define a type for the four metrics we want in our dashboard cards
// This gives us a clear contract: these four fields should always be there
export interface DashboardMetrics {
  balance: string;
  totalTrades: number;
  netPnL: string;
  activePositions: number;
}

// Here I defined a type for the structure of a transaction row
// Each "Transaction" will show up in our table of recent buys/sells
export interface Transaction {
  id: string;
  symbol: string;      // e.g. "BTC", "ETH" — using faker.finance.currencyCode()
  type: "Buy" | "Sell"; // We randomly pick one or the other
  amount: string;      // Formatted as currency, e.g. "+123.45" or "-678.90"
  date: string;        // A date string generated by Faker
  user: string;        // Fake username to show us who initiated the trade
}

// this is a type for data points used in our bar chart (holdings/performance over time)
export interface HoldingPoint {
  label: string; // e.g. "Jan", "Feb"
  value: number; 
}




// Im creating a fixed list of crypto symbls we want to use throughout the dashboard
const CRYPTO_SYMBOLS = ["BTC", "ETH", "LTC", "XRP", "ADA", "SOL", "DOT", "DOGE"];

// This function returns an object with four key metrics for our cards: balance, totalTrades, netPnL, and activePositions
// I wrapped each field in Faker so that on each call, we see different numbers. Feels more realistic than static placeholders
export function generateDashboardMetrics(): DashboardMetrics {
  return {
    balance: faker.finance.amount({
      min: 1000,
      max: 50000,
      dec: 2,
      symbol: "$",  
    }),
    totalTrades: faker.number.int({ min: 10, max: 500 }),               
    netPnL: faker.finance.amount({
      min: -1000,
      max: 5000,
      dec: 2,
      symbol: "$",
      autoFormat: true, 
    }),
    activePositions: faker.number.int({ min: 1, max: 20 }),             
  };
}

// Here  I generate an array of "Transaction" objects. I default to 8 items
// Each entry randomly chooses Buy/Sell, picks a currency code, and sets   a random amount.
// I also  generate a random date and username to fill out the table.
export function generateRecentTransactions(count = 8): Transaction[] {
  return Array.from({ length: count }, () => {
    const isBuy = faker.datatype.boolean();
    
    const symbol = faker.helpers.arrayElement(CRYPTO_SYMBOLS);

    const amount = faker.finance.amount({
      min: 10,
      max: 2000,
      dec: 2,
      symbol: isBuy ? "+$" : "-$",
      autoFormat: false, 
    });

    return {
      id: faker.string.uuid(),                                        
      symbol,       
      type: isBuy ? "Buy" : "Sell",
      amount,
      date: faker.date.recent({ days: 10 }).toLocaleDateString(),     
      user: faker.internet.userName(),                                
    };
  });
}

// Here I create an array of { label, value } objects to feed into our bar chart
// I’m using faker.date.mont() and then slicing to get the first three letters
// so the x-axis labels look like "Jan", "Feb", etc. The value is just a random number
// between 1000 and 50000 to simulate portfolio value
export function generateHoldingsData(points = 6): HoldingPoint[] {
  return Array.from({ length: points }, () => ({
    label: faker.date.month().slice(0, 3),   // “Jan”, “Feb” etc.
    value: faker.number.int({ min: 1000, max: 50000 }), 
  }));
}